{"version":3,"sources":["components/input.jsx","components/image.jsx","components/button.jsx","components/item.jsx","components/items.jsx","App.js","serviceWorker.js","index.js","components/bg.jpg"],"names":["input","type","onChange","this","props","class","Component","image","src","Im","className","onClick","onClear","width","height","viewBox","fill","xmlns","fill-rule","d","Add","onAdd","Item","itm","t","onDelete","id","Items","items","map","key","App","state","text","textChange","e","console","log","handleAdd","lenght","length","setState","handleclear","filter","i","handledelete","itemID","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"wNAwBeA,E,uKAjBX,OAIF,6BACA,2BAAOC,KAAK,OAAOC,SAAUC,KAAKC,MAAMF,SAAWG,MAAM,sB,GAVvCC,a,gBC6BLC,E,uKAxBX,OAIF,6BAEA,yBAAKC,IAAKC,IAAIC,UAAU,gBAGjB,yBAAKC,QAASR,KAAKC,MAAMQ,QAASP,MAAM,+CAA+CQ,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,eAAeC,MAAM,8BACrK,0BAAMC,YAAU,UAAUC,EAAE,sHAC5B,0BAAMD,YAAU,UAAUC,EAAE,oI,GAfVb,aCwBDc,E,uKAlBX,OAIF,yBAAKV,UAAU,UAEf,4BAAQA,UAAU,0BAA0BC,QAASR,KAAKC,MAAMiB,OAAhE,iB,GAXYf,aCyBHgB,E,uKAvBN,IAAD,OAEJ,OAIF,6BACA,wBAAIjB,MAAM,qCACXF,KAAKC,MAAMmB,IAAIC,EAChB,0BAAMnB,MAAM,uBAAuBM,QAAS,kBAAI,EAAKP,MAAMqB,SAAS,EAAKrB,MAAMmB,IAAIG,a,GAZhEpB,aCgCJqB,E,uKA7BN,IAAD,OAEJ,OAIF,6BAEAxB,KAAKC,MAAMwB,MAAMC,KAAI,SAAAN,GAAG,OACvB,kBAAC,EAAD,CACAO,IAAMP,EAAIG,GACVH,IAAKA,EACLE,SAAU,EAAKrB,MAAMqB,mB,GAfJnB,aC6ELyB,G,kNAvEfC,MAAM,CAGJJ,MAAM,GAINK,KAAK,K,EAIPC,WAAY,SAACC,GACb,EAAKH,MAAMC,KAAKE,EAChBC,QAAQC,IAAI,EAAKL,MAAMC,O,EAGvBK,UAAU,WACR,GAAoB,KAAjB,EAAKN,MAAMC,KAAU,CACxB,IAAML,EAAK,YAAM,EAAKI,MAAMJ,OACtBW,EAAOX,EAAMY,OAAO,EAC1BZ,EAAMW,EAAO,GAAI,CAACb,GAAGa,EAAOf,EAAE,EAAKQ,MAAMC,MACzC,EAAKD,MAAMJ,MAAMA,EAIhB,EAAKa,SAAS,CAACb,UACfQ,QAAQC,IAAIT,GACZ,EAAKI,MAAMC,KAAK,M,EAGnBS,YAAY,WACV,IAAOd,EAAO,EAAKI,MAAMJ,MAAMe,QAAO,SAAAC,GAAC,OAAIA,EAAElB,GAAG,KAEhD,EAAKe,SAAS,CAACb,W,EAEjBiB,aAAa,SAACC,GACZ,IAAOlB,EAAO,EAAKI,MAAMJ,MAAMe,QAAO,SAAAC,GAAC,OAAIA,EAAElB,KAAKoB,KAElD,EAAKL,SAAS,CAACb,W,uDAGR,IAAD,OACN,OACE,6BAEE,kBAAC,EAAD,CACAhB,QAAST,KAAKuC,cAGhB,yBAAKhC,UAAU,+CAEf,yCACA,kBAAC,EAAD,CACAR,SAAU,SAAAiC,GAAC,OAAE,EAAKD,WAAWC,EAAEY,OAAOC,UAGrC,kBAAC,EAAD,CAEApB,MAAOzB,KAAK6B,MAAMJ,MACnBH,SAAUtB,KAAK0C,eAGP,kBAAC,EAAD,CACAxB,MAAOlB,KAAKmC,kB,GAhENhC,cCIE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.90982b4f.chunk.js","sourcesContent":["import React, {Component, useState} from 'react';\n\nclass input extends Component {\n\n\nrender(){\n\n    return(\n        \n\n\n  <div>\n  <input type=\"text\" onChange={this.props.onChange } class=\"form-control\" />\n</div>\n\n       \n    );\n}\n\n\n\n\n\n}\nexport default input;","import React, {Component, useState} from 'react';\nimport Im from './bg.jpg'\n// import { black } from 'color-name';\nclass image extends Component {\n\nrender(){\n\n    return(\n        \n\n\n  <div>\n      \n  <img src={Im} className=\" w-50 mh-10\" >\n  </img>\n      \n         <svg onClick={this.props.onClear} class=\"clear fixed-top bi bi-arrow-counterclockwise\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill-rule=\"evenodd\" d=\"M12.83 6.706a5 5 0 0 0-7.103-3.16.5.5 0 1 1-.454-.892A6 6 0 1 1 2.545 5.5a.5.5 0 1 1 .91.417 5 5 0 1 0 9.375.789z\"/>\n  <path fill-rule=\"evenodd\" d=\"M7.854.146a.5.5 0 0 0-.708 0l-2.5 2.5a.5.5 0 0 0 0 .708l2.5 2.5a.5.5 0 1 0 .708-.708L5.707 3 7.854.854a.5.5 0 0 0 0-.708z\"/>\n</svg>\n\n</div>\n       \n    );\n}\n\n\n\n\n\n}\nexport default image;","import React, {Component, useState} from 'react';\n\n\n\nclass Add extends Component {\n    \n    \n    render(){\n    \n        return(\n            \n    \n    \n      <div className=\"w-100 \">\n          \n      <button className=\"  btn btn-success w-100\" onClick={this.props.onAdd}>Add item</button>\n            \n    </div>\n           \n        );\n    }\n    \n    \n    \n    \n    \n    }\n    export default Add;","import React, {Component, useState} from 'react';\n\n\nclass Item extends Component {\n\n\nrender(){\n\n    return(\n        \n\n\n  <div  >\n  <h1 class=\" m-2 text-warning   badge-danger \">\n{this.props.itm.t}\n<span class=\"fa fa-trash delete  \" onClick={()=>this.props.onDelete(this.props.itm.id)}></span>\n  </h1>\n  \n  \n</div  >\n       \n    );\n}\n\n\n\n\n\n}\nexport default Item;","import React, {Component, useState} from 'react';\nimport Item  from './item';\n\nclass Items extends Component {\n\n\nrender(){\n\n    return(\n        \n\n\n  <div  >\n\n {this.props.items.map(itm=>\n   <Item\n   key ={itm.id}\n   itm={itm}\n   onDelete={this.props.onDelete}\n   >\n     \n   </Item>\n)}\n</div>\n \n       \n  );\n    \n}\n\n\n\n\n\n}\nexport default Items;","\nimport React, {Component, useState} from 'react';\nimport Input  from './components/input';\nimport Image  from './components/image';\nimport Button  from './components/button';\nimport Items  from './components/items';\n\nimport Css from './App.css'\nclass App extends Component  {\nstate={\n  \n\n  items:[\n    \n   \n],\n  text:\" \"\n   \n};\n\ntextChange =(e)=>{\nthis.state.text=e;\nconsole.log(this.state.text)\n};\n\nhandleAdd=()=>{\n  if(this.state.text!=\" \"){\n  const items =[...this.state.items]\n  const lenght=items.length+1;\n  items[lenght-1]= {id:lenght,t:this.state.text}\n  this.state.items=items;\n  \n    \n  \n   this.setState({items});\n   console.log(items)\n   this.state.text=\" \"\n  }\n}\nhandleclear=()=>{\n  const  items= this.state.items.filter(i => i.id<0); \n  \n  this.setState({items});\n}\nhandledelete=(itemID)=>{\n  const  items= this.state.items.filter(i => i.id!==itemID); \n\n  this.setState({items});\n}\n\nrender(){\n  return (\n    <div >\n      \n      <Image\n      onClear={this.handleclear}\n      />\n      \n    <div className=\"col-6 h-100 text-center badge badge-primary\">\n    \n    <h1>Todo list</h1>\n    <Input\n    onChange={e=>this.textChange(e.target.value)}\n    />\n    \n     <Items\n     \n     items={this.state.items}\n    onDelete={this.handledelete}\n\n   />\n            <Button\n            onAdd={this.handleAdd} />\n           \n    </div>\n    </div>\n\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.1e71c5ad.jpg\";"],"sourceRoot":""}